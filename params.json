{"note":"Don't delete this file! It's used internally to help with page regeneration.","name":"PDO4You","tagline":"Esta classe implementa o padrão de projeto Singleton para conexão de banco de dados usando a extensão PDO (PHP Data Objects)","google":"UA-5376735-7","body":"PDO4You\r\n==================================================\r\n\r\nEsta classe é baseada no PDO, que é uma extensão do PHP que permite aos desenvolvedores criar um código portável, de modo a atender a maioria das bases de dados mais populares.\r\nSendo o MySQL, PostgreSQL, Oracle, MS SQL Server, Sybase.\r\n\r\nE agora a partir da versão 2.6, também oferencendo suporte ao banco de dados CUBRID.\r\nO mais novo sistema de gerenciamento de banco de dados altamente otimizado para aplicações Web.\r\nMais informações em: http://www.cubrid.org\r\n\r\nO PDO4You provê uma camada abstrata de acesso a dados, que independentemente de qual base de dados você esteja utilizando, sempre poderá usar os mesmos métodos para emitir consultas e buscar dados.\r\n\r\nO padrão de projeto Singleton foi adotado para otimizar a conexão, garantindo uma única instância do objeto de conexão por base de dados.\r\n\r\n\r\n**Vantagens em sua utilização:**\r\n* Abstração de conexão\r\n* Proteção contra SQL Injection\r\n* Métodos CRUD pré-definidos\r\n* Múltiplas conexões por base de dados\r\n* Instrução SQL compacta, usando notação JSON\r\n* Tratamento de erros com Stack Trace\r\n\r\n\r\n\r\nIntrodução: carregando a biblioteca necessária\r\n--------------------------------------------------\r\n\r\n~~~ php\r\n<?php\r\n\r\n// Apenas um arquivo é necessário para carregar toda a biblioteca\r\nrequire_once('PDO4You.load.php');\r\n\r\n?>\r\n~~~ \r\n\r\n`PDO4You.load.php`: arquivo responsável pelo carregamento dos arquivos necessários ao funcionamento da lib PDO4You.\r\n\r\n`PDO4You.class.php`: contém a implementação do objeto PDO de conexão.\r\n\r\n`PDO4You.config.php`: arquivo de configuração inicial, de acesso ao servidor e base de dados.\r\n\r\n`PDO4You.library.php`: contém um autoloading de classes e pode ser usado como biblioteca de funções úteis ao sistema.\r\n\r\n\r\n\r\nVerificando os drivers suportados pelo servidor\r\n--------------------------------------------------\r\n\r\nExecute o método abaixo para verificar se o servidor tem suporte a um driver PDO específico de sua base de dados. \r\nOs drivers suportados serão exibidos na tela.\r\n\r\n~~~ php\r\n<?php\r\n\r\n// O método abaixo exibe todos os drivers instalados e que são suportados pelo servidor\r\nPDO4You::getAvailableDrivers();\r\n\r\n?>\r\n~~~\r\n\r\nPara habilitar algum driver não instalado, localize o arquivo php.ini, abra e procure por \"extension=\" sem as aspas, depois descomente as linhas a seguir conforme sua base de dados de preferência, removendo no início de cada linha o \"ponto-e-vírgula\" e após mudanças, reinicie o servidor.\r\n\r\n~~~ html\r\nextension=php_pdo.dll\r\nextension=php_pdo_mysql.dll\r\nextension=php_pdo_pgsql.dll\r\n;extension=php_pdo_cubrid.dll\r\n;extension=php_pdo_mssql.dll\r\n;extension=php_pdo_oci.dll\r\n;extension=php_pdo_oci8.dll\r\n;extension=php_pdo_sqlite.dll\r\n~~~\r\n\r\n\r\n\r\nEstabelecendo conexão com a base de dados\r\n--------------------------------------------------\r\n\r\nPara abstrair nossos mecanismos de acesso aos dados, usamos um DSN (Data Source Name = Nome de Fonte de Dados) que armazena as informações necessárias para se iniciar uma comunicação com outras fontes de dados, tais como: tipo de tecnologia, nome do servidor ou localização, nome da base de dados, usuário, senha e outras configurações adicionais. Isso facilita a troca de acesso à base de dados que sofrerem migração.\r\n\r\n~~~ php\r\n<?php\r\n\r\n// Principais meios de se iniciar uma instância de conexão\r\n\r\n# PADRÃO \r\nPDO4You::getInstance(); // Os dados de acesso já foram definidos no arquivo de configuração inicial\r\n\r\n\r\n// Conectando-se a outras fontes de dados através de um DSN\r\n\r\n# MySQL\r\nPDO4You::getInstance('nome_da_instancia', 'mysql:host=localhost;dbname=pdo4you;port=3306', 'user', 'pass');\r\n\r\n# PostgreSQL\r\nPDO4You::getInstance('nome_da_instancia', 'pgsql:host=localhost;dbname=pdo4you;port=5432', 'user', 'pass');\r\n\r\n# CUBRID\r\nPDO4You::getInstance('nome_da_instancia', 'cubrid:host=localhost;dbname=pdo4you;port=33000', 'user', 'pass');\r\n\r\n?>\r\n~~~ \r\n\r\n\r\n\r\nRealizando operações CRUD em sua base de dados\r\n--------------------------------------------------\r\n\r\nO termo CRUD em inglês se refere as 4 operações básicas em uma base de dados e significam: \r\nCreate(INSERT), Retrieve(SELECT), Update(UPDATE) e Destroy(DELETE)\r\n\r\nInstruções SQL de consulta:\r\n\r\n`PDO4You::select()`: retorna um array indexado pelo nome da coluna. Equivale a PDO::FETCH_ASSOC\r\n\r\n`PDO4You::selectNum()`: retorna um array indexado pela posição numérica da coluna. Equivale a PDO::FETCH_NUM\r\n\r\n`PDO4You::selectObj()`: retorna um objeto com nomes de coluna como propriedades. Equivale a PDO::FETCH_OBJ\r\n\r\n`PDO4You::selectAll()`: retorna um array indexado pelo nome e pela posição numérica da coluna. Equivale a PDO::FETCH_BOTH\r\n\r\n\r\nAbaixo seguem exemplos de como realizar estas operações.\r\n\r\n\r\nSelecionando registros na base de dados\r\n--------------------------------------------------\r\n\r\n~~~ php\r\n<?php\r\n\r\n// Iniciando uma instância de conexão. O padrão de conexão é não-persistente\r\nPDO4You::getInstance();\r\n\r\n// Definindo uma comunicação persistente com a base de dados\r\nPDO4You::setPersistent(true);\r\n\r\n// Selecionando registros na base de dados\r\nPDO4You::select('SELECT * FROM books LIMIT 2');\r\n\r\n// Selecionando registros e definindo qual instância de conexão será utilizada\r\nPDO4You::select('SELECT * FROM books LIMIT 2', 'nome_da_instancia');\r\n\r\n\r\n// Query de consulta\r\n$sql = 'SELECT * FROM books LIMIT 2';\r\n\r\n// Selecionando registros com FETCH_ASSOC\r\n$result = PDO4You::select($sql);\r\n\r\n// Selecionando registros com FETCH_NUM\r\n$result = PDO4You::selectNum($sql);\r\n\r\n// Selecionando registros com FETCH_OBJ\r\n$result = PDO4You::selectObj($sql);\r\n\r\n// Selecionando registros com FETCH_BOTH\r\n$result = PDO4You::selectAll($sql);\r\n\r\n\r\n// Selecionando todos os registros\r\n$result = PDO4You::select('SELECT * FROM books');\r\n\r\n// Obtendo o total de linhas afetadas pela operação\r\n$total = PDO4You::rowCount();\r\n\r\n// Exibindo o resultado da consulta\r\necho '<pre><h3>Resultado da consulta:</h3> ' , print_r($result, true) , '</pre>';\r\n\r\n?>\r\n~~~ \r\n\r\n\r\n\r\nOs métodos insert(), update() e delete() da classe PDO4You estão aninhadas entre transações, sendo elas beginTransaction() e commit(). Isto garante que o sistema consiga reverter uma operação mal sucedida e todas as alterações feitas desde o início de uma transação.\r\n\r\nUm erro grave na execução resulta em invocar o rollBack(), desfazendo toda a operação. Consequentemente será lançada uma Exception, rastreando o caminho de todas as classes e métodos envolvidos na operação, agilizando em ambiente de \"produção\" o processo de debug e com isso, assegurando a base de dados do risco de se tornar instável.\r\n\r\nNo MySQL o suporte a transações está disponível em tabelas do tipo InnoDB.\r\n\r\nAs instruções SQL da classe PDO4You (insert, update e delete) fazem agora o uso de notação JSON, um novo formato de se escrever querys que por sua vez possui convenções muito semelhante às linguagens como Python, Ruby, C++, Java, JavaScript. A nova sintaxe adotada pela classe é bem mais bonita e concisa, que a usada por Arrays. Além de compacta, as instruções possuem a capacidade de operar ao mesmo tempo, em diferentes tabelas da mesma base de dados. \r\n\r\n\r\nAbaixo seguem trechos de exemplo na prática.\r\n\r\n\r\n\r\nInserindo um simples registro na base de dados\r\n--------------------------------------------------\r\n\r\n~~~ php\r\n<?php\r\n\r\n// Query\r\n$json = '\r\n{\r\n\tquery : [\r\n\t\t{\r\n\t\t\ttable: \"users\" ,\r\n\t\t\tvalues: { mail: \"pdo4you@gmail.com\" }\r\n\t\t}\r\n\t] \r\n}\r\n';\r\n\r\n// A variável $result armazena como retorno do método, um array com o número de linhas afetadas por operação de inserção\r\n$result = PDO4You::insert($json);\r\n\r\n// Logo após a inserção, utilize o método PDO4You::lastId() para obter o ID da última operação de inserção na base de dados\r\n$lastInsertId = PDO4You::lastId();\r\n\r\n// Se necessário, informe o nome da variável de sequência, solicitado em algumas base de dados\r\n$lastInsertId = PDO4You::lastId('table_id_seq');\r\n\r\n?>\r\n~~~ \r\n\r\n\r\n\r\nInserindo múltiplos registros\r\n--------------------------------------------------\r\n\r\n~~~ php\r\n<?php\r\n\r\n// Query\r\n$json = '\r\n{\r\n\tquery : [\r\n\t\t{\r\n\t\t\ttable: \"users\" ,\r\n\t\t\tvalues: { mail: \"mail_1@domain.com\" }\r\n\t\t},{\r\n\t\t\ttable: \"users\" ,\r\n\t\t\tvalues: { mail: \"mail_2@domain.com\" }\r\n\t\t},{\r\n\t\t\ttable: \"books\" ,\r\n\t\t\tvalues: { title: \"title\", author: \"author\" }\r\n\t\t}\r\n\t] \r\n}\r\n';\r\n\r\n// A variável $result armazena um array com o número de linhas afetadas por operação de inserção\r\n$result = PDO4You::insert($json);\r\n\r\n?>\r\n~~~ \r\n\r\n\r\n\r\nAtualizando múltiplos registros\r\n--------------------------------------------------\r\n\r\n~~~ php\r\n<?php\r\n\r\n// Query\r\n$json = '\r\n{\r\n\tquery : [\r\n\t\t{\r\n\t\t\ttable: \"users\" ,\r\n\t\t\tvalues: { mail: \"mail_1@domain.com\" } ,\r\n\t\t\twhere: { id: 2 }\r\n\t\t},{\r\n\t\t\ttable: \"users\" ,\r\n\t\t\tvalues: { mail: \"mail_2@domain.com\" } ,\r\n\t\t\twhere: { id: 3 }\r\n\t\t},{\r\n\t\t\ttable: \"books\" ,\r\n\t\t\tvalues: { title: \"new-title\", author: \"new-author\" } ,\r\n\t\t\twhere: { id: 1 }\r\n\t\t}\r\n\t] \r\n}\r\n';\r\n\r\n// A variável $result armazena um array com o número de linhas afetadas por operação de atualização\r\n$result = PDO4You::update($json);\r\n\r\n?>\r\n~~~ \r\n\r\n\r\n\r\nExcluindo múltiplos registros\r\n--------------------------------------------------\r\n\r\n~~~ php\r\n<?php\r\n\r\n// Query\r\n$json = '\r\n{\r\n\tquery : [\r\n\t\t{\r\n\t\t\ttable: \"users\" ,\r\n\t\t\twhere: { id: 2 }\r\n\t\t},{\r\n\t\t\ttable: \"users\" ,\r\n\t\t\twhere: { id: 5 }\r\n\t\t},{\r\n\t\t\ttable: \"users\" ,\r\n\t\t\twhere: { id: 10 }\r\n\t\t},{\r\n\t\t\ttable: \"books\" ,\r\n\t\t\twhere: { id: 10 }\r\n\t\t}\r\n\t] \r\n}\r\n';\r\n\r\n// A variável $result armazena um array com o número de linhas afetadas por operação de exclusão\r\n$result = PDO4You::delete($json);\r\n\r\n?>\r\n~~~ \r\n"}